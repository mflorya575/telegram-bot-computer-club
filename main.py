from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ñ–∞–π–ª—ã
from config import *
from keyboards import *
from utils import *
import texts


# --------------------------------------------------------#
# –í–∞—à API —Ç–æ–∫–µ–Ω
api = API
logging.basicConfig(level=logging.INFO)
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
# --------------------------------------------------------#


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@dp.message_handler(commands=['start'])
async def start(message):
    text = "–¢–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ \-–æ–∫"
    await message.answer(f'‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' + texts.start, reply_markup=start_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –Ω–∞—Å"
@dp.message_handler(Text(equals=['‚ÑπÔ∏è –û –Ω–∞—Å']))
async def about_us(message):
    await message.answer(texts.about_us, parse_mode='HTML', reply_markup=start_kb)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¶–µ–Ω—ã"
@dp.message_handler(Text(equals=['üìù –¶–µ–Ω—ã']))
async def price(message):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É</b>', parse_mode='HTML', reply_markup=games_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "GTA 5"
@dp.callback_query_handler(text='GTA 5')
async def gta5(call):
    await call.message.answer(texts.game_gta5, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "RDR 2"
@dp.callback_query_handler(text='RDR 2')
async def rdr2(call):
    await call.message.answer(texts.game_rdr2, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Sims 4"
@dp.callback_query_handler(text='Sims 4')
async def sims4(call):
    await call.message.answer(texts.game_sims4, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "CS 2"
@dp.callback_query_handler(text='CS 2')
async def cs2(call):
    await call.message.answer(texts.game_cs2, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Battlefield 4"
@dp.callback_query_handler(text='Battlefield 4')
async def battlefield(call):
    await call.message.answer(texts.game_battlefield, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Atomic Heart"
@dp.callback_query_handler(text='Atomic Heart')
async def atomic_heart(call):
    await call.message.answer(texts.game_atomic_heart, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Cyberpunk"
@dp.callback_query_handler(text='Cyberpunk')
async def cyberpunk(call):
    await call.message.answer(texts.game_cyberpunk, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Roblox"
@dp.callback_query_handler(text='Roblox')
async def roblox(call):
    await call.message.answer(texts.game_roblox, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()



# —Å–ø–∏—Å–æ–∫ id –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admins = [504997812, 1046276866]

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É /admin
@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ admins
    if message.from_user.id in admins:

        # –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        await message.answer("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode="HTML", reply_markup=admin_panel)

    else:

        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", parse_mode="HTML", reply_markup=None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
@dp.callback_query_handler(text="users")
async def users(call: types.CallbackQuery):

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    await call.message.answer(show_users())

    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query_handler(text="statistics")
async def statistics(call: types.CallbackQuery):

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await call.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {show_statistics()}")

    await call.answer()

# –°–æ–∑–¥–∞–¥–∏–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserState(StatesGroup):
    id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚õîÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
@dp.callback_query_handler(text="block_user")
async def block_user(call: types.CallbackQuery):

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserState.id.set()

    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º id
@dp.message_handler(state=UserState.id)
async def fsm_handler(message: types.Message, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    input_id = message.text

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    add_user_to_block(input_id)

    # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {input_id}, –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
@dp.callback_query_handler(text="unlock_user")
async def unlock_user(call: types.CallbackQuery):

    #–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

    #–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await UserState.id.set()

    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º id
@dp.message_handler(state=UserState.id)
async def fsm_handler(message: types.Message, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    input_id = message.text

    # –í—ã–∑—ã–≤–∞–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    unlock_users(input_id)

    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {input_id}, –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()






# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
def check_user_in_block(user_id):
    pass


@dp.message_handler()
async def repeat(message: types.Message):

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = int(message.from_user.id)

    #–ü–µ—Ä–µ–¥–∞—ë–º id –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    #–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1, —Ç–æ ...
    if check_user_in_block(user_id) == 1:
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")

    #–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0, —Ç–æ –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    else:
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", reply_markup=None)




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
